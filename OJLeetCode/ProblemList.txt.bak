========================================================================================================================
Single Number 
Given an array of integers, every element appears twice except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

========================================================================================================================
========================================================================================================================
Insertion Sort List 

Sort a linked list using insertion sort.



========================================================================================================================
========================================================================================================================
Maximum Depth of Binary Tree 

Given a binary tree, find its maximum depth.
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


========================================================================================================================
========================================================================================================================
Same Tree

Given two binary trees, write a function to check if they are equal or not.
Two binary trees are considered equal if they are structurally identical and the nodes have the same value.



========================================================================================================================
========================================================================================================================
Reverse Integer

Reverse digits of an integer.

Example1: x = 123, return 321
Example2: x = -123, return -321



========================================================================================================================
========================================================================================================================
Search Insert Position

Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 ¡÷ 2
[1,3,5,6], 2 ¡÷ 1
[1,3,5,6], 7 ¡÷ 4
[1,3,5,6], 0 ¡÷ 0



========================================================================================================================
========================================================================================================================
Binary Tree Postorder Traversal
Given a binary tree, return the postorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
return [3,2,1].
Note: Recursive solution is trivial, could you do it iteratively?


========================================================================================================================
========================================================================================================================
Binary Tree Preorder Traversal 
Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].

Note: Recursive solution is trivial, could you do it iteratively?




========================================================================================================================
========================================================================================================================
Unique Binary Search Trees 
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3



========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/climbing-stairs/

Climbing Stairs 
You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?


========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/remove-duplicates-from-sorted-list/
Remove Duplicates from Sorted List
Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,
Given 1->1->2, return 1->2.
Given 1->1->2->3->3, return 1->2->3.

========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/binary-tree-inorder-traversal/
Binary Tree Inorder Traversal 

Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?

confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.


========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/populating-next-right-pointers-in-each-node/
Populating Next Right Pointers in Each Node 
Given a binary tree

    struct TreeLinkNode {
      TreeLinkNode *left;
      TreeLinkNode *right;
      TreeLinkNode *next;
    }
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

Note:

You may only use constant extra space.
You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).
For example,
Given the following perfect binary tree,
         1
       /  \
      2    3
     / \  / \
    4  5  6  7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \  / \
    4->5->6->7 -> NULL



========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/reorder-list/
Given a singly linked list L: L0¡÷L1¡÷¡K¡÷Ln-1¡÷Ln,
reorder it to: L0¡÷Ln¡÷L1¡÷Ln-1¡÷L2¡÷Ln-2¡÷¡K

You must do this in-place without altering the nodes' values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}.



========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/max-points-on-a-line/
Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.




========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
Best Time to Buy and Sell Stock II 
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like 
(ie, buy one and sell one share of the stock multiple times). 
However, you may not engage in multiple transactions at the same time 
(ie, you must sell the stock before you buy again).


========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/linked-list-cycle/
Linked List Cycle 
Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?


========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/candy/

There are N children standing in a line. Each child is assigned a rating value.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
What is the minimum candies you must give?


========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/sort-list/

Sort a linked list in O(n log n) time using constant space complexity.


========================================================================================================================
========================================================================================================================

http://oj.leetcode.com/problems/merge-two-sorted-lists/
Merge Two Sorted Lists 
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.


========================================================================================================================
========================================================================================================================




========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
========================================================================================================================





========================================================================================================================
