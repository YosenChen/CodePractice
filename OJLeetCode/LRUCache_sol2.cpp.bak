#include <cstdlib>
#include <iostream>
#include <cstdio>
#include <map>

#define EN_LOG 1

// to make sol1 faster
// 1. don't use find (you cannot do anything in its internal loop...
// 2. don't use map, since the capacity is given in the constructor, 
//    allocating memory at ctor would be much faster than allocating on demand
// 3. the least recently used item: "used" means both set and get

class LRUCache{
public:
    struct cData
    {
        int data, key, age;
        bool bInUse;
        
        cData():age(0),bInUse(false){}
        cData(int d, int k):data(d),key(k),age(0),bInUse(true){}
    };
    
    LRUCache(int capacity)
    : mCap(capacity)
    {
        mpcData = new cData[mCap];
        if (EN_LOG) 
        {
            printf("[%s]: ", __FUNCTION__);
            for (int i=0; i<mCap; i++)
            {
                printf("(%d)", mpcData[i].bInUse);
            }
            printf("\n");
        }
    }
    ~LRUCache()
    {
        delete [] mpcData;
    }
    int get(int key) {
        std::map<int, cData>::iterator it;
        int i, res=-1;
        
        {
            for (i=0; i<mCap; i++)
            {
                if (!mpcData[i].bInUse) continue;
                
                if (mpcData[i].key == key)
                {
                    mpcData[i].age = 0;
                    res = mpcData[i].data;
                }
                else
                    mpcData[i].age++;
            }
        }
        return res;
    }
    
    void set(int key, int value) {
        if (EN_LOG) printf("[%s] check1\n", __FUNCTION__);
        int maxAge=-1, oldest, idxNotInUse=-1;
        bool bKeyFound=false;
            
        for (int i=0; i<mCap; i++)
        {
            if (!mpcData[i].bInUse)
            {
                if (idxNotInUse==-1) idxNotInUse = i; //get 1st available entry
            }
            // following all in use
            else if(mpcData[i].key == key)
            {
                bKeyFound = true;
                mpcData[i].data = value; // update value, done
                mpcData[i].age = 0; //reset age
            }
            else // search maxAge
            {
                if (++mpcData[i].age > maxAge)
                {
                    maxAge = mpcData[i].age;
                    oldest = i;
                }
            }
        }
        if (EN_LOG) printf("[%s] check2\n", __FUNCTION__);
        
        if (bKeyFound) return;
        
        if (idxNotInUse != -1) // not full, create one
        {
            cData& rData = mpcData[idxNotInUse];
            rData.bInUse = true;
            rData.age = 0;
            rData.data = value;
            rData.key = key;
            return;
        }
        
        // full, replace the oldest
        cData& rData = mpcData[oldest];
        rData.age = 0;
        rData.data = value;
        rData.key = key;
    }
    
    int mCap;
    cData* mpcData;
    
};

int main(void)
{
    LRUCache cache(3);
    cache.set(1, 100);
    cache.set(2, 200);
    cache.set(3, 300);
    printf("get(1): %d\n", cache.get(1));
    printf("get(1): %d\n", cache.get(1));
    printf("get(2): %d\n", cache.get(2));
    cache.set(4, 400);
    printf("get(3): %d\n", cache.get(3));
    printf("get(4): %d\n", cache.get(4));
    system("pause");

    printf("OJ LeetCode test case:\n");
    LRUCache cache2(2);
    cache2.set(2,1);
    cache2.set(1,1);
    cache2.set(2,3);
    cache2.set(4,1);
    printf("get(1): %d\n", cache2.get(1));
    printf("get(2): %d\n", cache2.get(2));
    system("pause");
    
    return 0;
}



// OJ LeetCode result: 
// self test result: basic test ok

