#include <cstdlib>
#include <iostream>
#include <cstdio>

/**
 * Definition for singly-linked list.
 */
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};


class Solution {
public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        //here we assume lists are sorted from smallest to latgest
        
        if (!l1 && !l2) return NULL;
        
        ListNode start(0);
        ListNode *res = &start, *curr = &start;
        
        // try cases
        // l1 and l2 are NULL -> return NULL, OK
        // l1 and l2 run out at the same time -> impossible, 
        //               it runs 1 node at a time, it will stop when 1 list reaches the end.
        // l1 are NULL -> OK
        
        while(curr)
        {
            if (!l1)
            {
                curr->next = l2; //don't care whether l2 is NULL or not
                break;
            }
            if (!l2)
            {
                curr->next = l1; //don't care whether l1 is NULL or not
                break;
            }
            //now l1 and l2 are not NULL
            if (l1->val > l2->val) //connect curr with l2
            {
                curr->next = l2;
                l2 = l2->next;
                curr = curr->next;
            }
            else //connect curr with l1
            {
                curr->next = l1;
                l1 = l1->next;
                curr = curr->next;
            }
        }
        return res->next;
    }
};

void printList(ListNode* head)
{
    ListNode *temp = head;
    while(temp)
    {
        printf("(%d) ", temp->val);
        temp = temp->next;
    }
    printf(",list end\n");
}


ListNode a(1), b(5), c(7), d(8), e(10);
ListNode A(2), B(3), C(6), D(9);

void reset()
{
    a.next = &b;
    b.next = &c;
    c.next = &d;
    d.next = &e;
    e.next = NULL;
    
    A.next = &B;
    B.next = &C;
    C.next = &D;
    D.next = NULL;
}



int main()
{   
    Solution sln;
    
    reset();
    printList(sln.mergeTwoLists(&a, &A));
    reset();
    printList(sln.mergeTwoLists(&c, &A));
    reset();
    printList(sln.mergeTwoLists(&a, NULL));
    reset();
    A.next = NULL;
    printList(sln.mergeTwoLists(&a, &A));

    
    getchar();
    return 0;
    
}