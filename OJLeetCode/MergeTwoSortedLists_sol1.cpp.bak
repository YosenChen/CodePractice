#include <cstdlib>
#include <iostream>
#include <cstdio>

/**
 * Definition for singly-linked list.
 */
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};


class Solution {
public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        //here we assume lists are sorted from smallest to latgest
        if (!l1) return l2;
        if (!l2) return l1;
        
        //we merge l1 into l2
        ListNode *ptr1 = l1, *ptr2 = l2, *temp1 = NULL, *head = l2;
        
        {//initial
            if (ptr2->val > ptr1->val) 
            {
                head = ptr1;
                temp1 = ptr1->next;
                ptr1->next = ptr2;
            }
            else
            {
                //find ptr2 until ptr2->next->val > ptr1->val
                while ((ptr2->next) && (ptr2->next->val <= ptr1->val))
                {
                    ptr2 = ptr2->next;
                }
                //now (1) ptr2 reaches its end or (2) ptr2->next->val > ptr1->val
                ListNode* temp2 = ptr2->next;
                temp1 = ptr1->next;
                ptr2->next = ptr1;
                ptr1->next = temp2;
            }
            ptr2 = ptr1;
            ptr1 = temp1;
        }
        
        while(ptr1) //ptr2 is always alive, ptr1 might be NULL
        {
            // (ptr2->val >= ptr1->val) won't happen anymore
            {
                //find ptr2 until ptr2->next->val > ptr1->val
                while ((ptr2->next) && (ptr2->next->val <= ptr1->val))
                {
                    ptr2 = ptr2->next;
                }
                //now (1) ptr2 reaches its end or (2) ptr2->next->val > ptr1->val
                ListNode* temp2 = ptr2->next;
                temp1 = ptr1->next;
                ptr2->next = ptr1;
                ptr1->next = temp2;
            }
            ptr2 = ptr1;
            ptr1 = temp1;
        }
        //now ptr1 is NULL, reaches the end
        //now ptr2 connects with the remainder of original list2 (or NULL) -> OK
        return head;
    }
};

void printList(ListNode* head)
{
    ListNode *temp = head;
    while(temp)
    {
        printf("(%d) ", temp->val);
        temp = temp->next;
    }
    printf(",list end\n");
}


ListNode a(1), b(5), c(7), d(8), e(10);
ListNode A(2), B(3), C(6), D(9);

void reset()
{
    a.next = &b;
    b.next = &c;
    c.next = &d;
    d.next = &e;
    e.next = NULL;
    
    A.next = &B;
    B.next = &C;
    C.next = &D;
    D.next = NULL;
}



int main()
{   
    Solution sln;
    
    reset();
    printList(sln.mergeTwoLists(&a, &A));
    reset();
    printList(sln.mergeTwoLists(&c, &A));
    reset();
    printList(sln.mergeTwoLists(&a, NULL));
    reset();
    A.next = NULL;
    printList(sln.mergeTwoLists(&a, &A));

    
    getchar();
    return 0;
    
}

/*
    self test result: 
    OJ result: 
*/